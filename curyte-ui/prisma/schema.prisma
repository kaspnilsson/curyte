generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lesson {
  private        Boolean                  @default(true)
  authorId       String                   @db.Uuid
  title          String?
  uid            String                   @id @default(dbgenerated("uuid_generate_v4()"))
  saveCount      Int                      @default(0)
  description    String?
  tags           String[]
  coverImageUrl  String?
  created        DateTime                 @default(now()) @db.Timestamp(6)
  updated        DateTime                 @default(now()) @db.Timestamp(6)
  viewCount      Int                      @default(0)
  featured       Boolean                  @default(false)
  parentLessonId String?
  template       Boolean                  @default(false)
  content        Json?
  fts            Unsupported("tsvector")?
  profiles       Profile                  @relation(fields: [authorId], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  notes          Notes[]                  @relation("lessonsTonotes")

  @@index([fts], map: "lessons_fts")
  @@map("lessons")
}

model Path {
  uid           String                   @id @default(dbgenerated("uuid_generate_v4()"))
  created       DateTime                 @default(now()) @db.Timestamp(6)
  updated       DateTime                 @default(now()) @db.Timestamp(6)
  authorId      String                   @db.Uuid
  title         String?
  private       Boolean                  @default(true)
  viewCount     Int                      @default(0)
  coverImageUrl String?
  units         Json?
  fts           Unsupported("tsvector")?
  profiles      Profile                  @relation(fields: [authorId], references: [uid], onDelete: NoAction, onUpdate: NoAction)

  @@index([fts], map: "paths_fts")
  @@map("paths")
}

model Profile {
  uid          String                   @id @db.Uuid
  displayName  String?
  photoUrl     String?
  bio          String?
  twitterUrl   String?
  linkedinUrl  String?
  personalUrl  String?
  publicEmail  String?
  venmoUrl     String?
  savedLessons String[]
  savedPaths   String[]
  fts          Unsupported("tsvector")?
  feedback     Feedback[]               @relation("feedbackToprofiles")
  lessons      Lesson[]
  notes        Notes[]                  @relation("notesToprofiles")
  paths        Path[]

  @@index([fts], map: "profiles_fts")
  @@map("profiles")
}

model Tag {
  viewCount Int                      @default(0)
  tagText   String                   @id
  lessonIds String[]
  fts       Unsupported("tsvector")?

  @@index([fts], map: "tags_fts")
  @@map("tags")
}

model Notes {
  lessonId String
  userId   String     @db.Uuid
  content  Json?
  updated  DateTime   @default(now()) @db.Timestamp(6)
  uid      String     @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  lessons  Lesson     @relation("lessonsTonotes", fields: [lessonId], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  profiles Profile    @relation("notesToprofiles", fields: [userId], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  feedback Feedback[] @relation("feedbackTonotes")

  @@id([userId, lessonId])
  @@map("notes")
}

model Feedback {
  updated      DateTime @default(now()) @db.Timestamp(6)
  inResponseTo String   @db.Uuid
  userId       String   @db.Uuid
  content      Json?
  notes        Notes    @relation("feedbackTonotes", fields: [inResponseTo], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  profiles     Profile  @relation("feedbackToprofiles", fields: [userId], references: [uid], onDelete: NoAction, onUpdate: NoAction)

  @@id([inResponseTo, userId])
  @@map("feedback")
}
